<?php

use Pandawa\Reloquent\Contract\Mappable as MappableContract;
use Pandawa\Reloquent\Map\Mappable;
use Illuminate\Contracts\Support\Arrayable;
use Pandawa\Component\Ddd\Model;
use Illuminate\Database\Eloquent\Model as LaravelModel;

class {{ class }} extends {{ entity }} implements MappableContract, Arrayable, Model
{
    use Mappable;

    public function __construct()
    {
        $this->setEntityMap(new {{ entity_map_class }});

        if (method_exists(get_parent_class($this), '__construct')) {
            parent::__construct();
        }
    }

    public static function __callStatic(string $name, $args)
    {
        return {{ entity_map_class }}::{$name}(...$args);
    }

    public function toArray(): array
    {
        return $this->entityMap->toArray();
    }

    public static function getResourceName(): string
    {
        return {{ entity_map_class }}::getResourceName();
    }

    public static function getModelClass(): ?string
    {
        return {{ entity_map_class }}::getModelClass();
    }

    public static function getRepositoryClass(): ?string
    {
        return {{ entity_map_class }}::getRepositoryClass();
    }

    public function __wakeup()
    {
        $this->setEntityMap($this->entityMap);
    }

    protected function persist(array $options = []): bool
    {
        $method = new ReflectionMethod(get_class($this->entityMap), 'persist');
        $method->setAccessible(true);

        $result = $method->invoke($this->entityMap);

        $this->relations = [];
        $this->setEntityMap($this->entityMap);

        return $result;
    }

    protected function remove(): bool
    {
        $method = new ReflectionMethod(get_class($this->entityMap), 'remove');
        $method->setAccessible(true);

        return $method->invoke($this->entityMap);
    }
}
